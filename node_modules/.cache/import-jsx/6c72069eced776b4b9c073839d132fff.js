"use strict";

const React = require("react");
const {
  Text,
  Box
} = require("ink");
const {
  useState
} = require("react");
const TextInput = require("ink-text-input").default;
const wcc = require("world-countries-capitals");
const App = () => {
  const [country, setCountry] = useState("");
  const [capital, setCapital] = useState("");
  const [currency, setCurrency] = useState("");
  const [phone, setPhone] = useState("");
  const [language, setLanguage] = useState("");
  React.useEffect(() => {
    const getCountry = wcc.getCountryDetailsByName(country);
    console.log(getCountry);
    setCapital(getCountry[0].capital);
    setCurrency(getCountry[0].currency);
    setPhone(getCountry[0].phone_code);
    setLanguage(getCountry[0].native_language);
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignSelf: "left"
  }, /*#__PURE__*/React.createElement(Box, {
    borderColor: "green",
    borderStyle: "round"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome to the country CLI")), /*#__PURE__*/React.createElement(TextInput, {
    placeholder: "Enter country name...",
    value: country,
    onChange: setCountry
  }), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    borderColor: "white",
    width: 80,
    borderStyle: "single"
  }, /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, "Code")), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, "Capital")), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, "Currency")), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, "Language"))), /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, phone)), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, capital)), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, currency)), /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, language)))));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlU3RhdGUiLCJUZXh0SW5wdXQiLCJkZWZhdWx0Iiwid2NjIiwiQXBwIiwiY291bnRyeSIsInNldENvdW50cnkiLCJjYXBpdGFsIiwic2V0Q2FwaXRhbCIsImN1cnJlbmN5Iiwic2V0Q3VycmVuY3kiLCJwaG9uZSIsInNldFBob25lIiwibGFuZ3VhZ2UiLCJzZXRMYW5ndWFnZSIsInVzZUVmZmVjdCIsImdldENvdW50cnkiLCJnZXRDb3VudHJ5RGV0YWlsc0J5TmFtZSIsImNvbnNvbGUiLCJsb2ciLCJwaG9uZV9jb2RlIiwibmF0aXZlX2xhbmd1YWdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInVpLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB7IFRleHQsIEJveCB9ID0gcmVxdWlyZShcImlua1wiKTtcbmNvbnN0IHsgdXNlU3RhdGUgfSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IFRleHRJbnB1dCA9IHJlcXVpcmUoXCJpbmstdGV4dC1pbnB1dFwiKS5kZWZhdWx0O1xuY29uc3Qgd2NjID0gcmVxdWlyZShcIndvcmxkLWNvdW50cmllcy1jYXBpdGFsc1wiKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXHRjb25zdCBbY291bnRyeSwgc2V0Q291bnRyeV0gPSB1c2VTdGF0ZShcIlwiKTtcblx0Y29uc3QgW2NhcGl0YWwsIHNldENhcGl0YWxdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjdXJyZW5jeSwgc2V0Q3VycmVuY3ldID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtwaG9uZSwgc2V0UGhvbmVdID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtsYW5ndWFnZSwgc2V0TGFuZ3VhZ2VdID0gdXNlU3RhdGUoXCJcIik7XG5cblx0UmVhY3QudXNlRWZmZWN0KCgpID0+IHtcblx0XHRjb25zdCBnZXRDb3VudHJ5ID0gd2NjLmdldENvdW50cnlEZXRhaWxzQnlOYW1lKGNvdW50cnkpO1xuXHRcdGNvbnNvbGUubG9nKGdldENvdW50cnkpO1xuXHRcdHNldENhcGl0YWwoZ2V0Q291bnRyeVswXS5jYXBpdGFsKTtcblx0XHRzZXRDdXJyZW5jeShnZXRDb3VudHJ5WzBdLmN1cnJlbmN5KTtcblx0XHRzZXRQaG9uZShnZXRDb3VudHJ5WzBdLnBob25lX2NvZGUpO1xuXHRcdHNldExhbmd1YWdlKGdldENvdW50cnlbMF0ubmF0aXZlX2xhbmd1YWdlKTtcblx0fSk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIiBhbGlnblNlbGY9XCJsZWZ0XCI+XG5cdFx0XHQ8Qm94IGJvcmRlckNvbG9yPVwiZ3JlZW5cIiBib3JkZXJTdHlsZT1cInJvdW5kXCI+XG5cdFx0XHRcdDxUZXh0PldlbGNvbWUgdG8gdGhlIGNvdW50cnkgQ0xJPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiRW50ZXIgY291bnRyeSBuYW1lLi4uXCJcblx0XHRcdFx0dmFsdWU9e2NvdW50cnl9XG5cdFx0XHRcdG9uQ2hhbmdlPXtzZXRDb3VudHJ5fVxuXHRcdFx0Lz5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiIGJvcmRlckNvbG9yPVwid2hpdGVcIiB3aWR0aD17ODB9IGJvcmRlclN0eWxlPVwic2luZ2xlXCI+XG5cdFx0XHRcdDxCb3g+XG5cdFx0XHRcdFx0PEJveCB3aWR0aD1cIjQwJVwiPlxuXHRcdFx0XHRcdFx0PFRleHQ+Q29kZTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0XHQ8Qm94IHdpZHRoPVwiNDAlXCI+XG5cdFx0XHRcdFx0XHQ8VGV4dD5DYXBpdGFsPC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHRcdDxCb3ggd2lkdGg9XCI0MCVcIj5cblx0XHRcdFx0XHRcdDxUZXh0PkN1cnJlbmN5PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHRcdDxCb3ggd2lkdGg9XCI0MCVcIj5cblx0XHRcdFx0XHRcdDxUZXh0Pkxhbmd1YWdlPC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQ8L0JveD5cblxuXHRcdFx0XHQ8Qm94PlxuXHRcdFx0XHRcdDxCb3ggd2lkdGg9XCI0MCVcIj5cblx0XHRcdFx0XHRcdDxUZXh0PntwaG9uZX08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdFx0PEJveCB3aWR0aD1cIjQwJVwiPlxuXHRcdFx0XHRcdFx0PFRleHQ+e2NhcGl0YWx9PC9UZXh0PlxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHRcdDxCb3ggd2lkdGg9XCI0MCVcIj5cblx0XHRcdFx0XHRcdDxUZXh0PntjdXJyZW5jeX08L1RleHQ+XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdFx0PEJveCB3aWR0aD1cIjQwJVwiPlxuXHRcdFx0XHRcdFx0PFRleHQ+e2xhbmd1YWdlfTwvVGV4dD5cblx0XHRcdFx0XHQ8L0JveD5cblx0XHRcdFx0PC9Cb3g+XG5cdFx0XHQ8L0JveD5cblx0XHQ8L0JveD5cblx0KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUNaLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNO0VBQUVDLElBQUk7RUFBRUM7QUFBSSxDQUFDLEdBQUdGLE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDcEMsTUFBTTtFQUFFRztBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDSyxPQUFPO0FBQ25ELE1BQU1DLEdBQUcsR0FBR04sT0FBTyxDQUFDLDBCQUEwQixDQUFDO0FBRS9DLE1BQU1PLEdBQUcsR0FBRyxN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