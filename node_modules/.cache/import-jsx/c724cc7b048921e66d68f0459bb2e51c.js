"use strict";

const React = require("react");
const {
  Text,
  Box
} = require("ink");
const {
  useState
} = require("react");
const TextInput = require("ink-text-input").default;
const wcc = require("world-countries-capitals");
const App = () => {
  const [country, setCountry] = useState("");
  const [capital, setCapital] = useState("");
  React.useEffect(() => {
    const getCountry = wcc.getCountryDetailsByName(country);
    setCapital(getCountry[0].capital);
  });
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignSelf: "left"
  }, /*#__PURE__*/React.createElement(Box, {
    borderColor: "green",
    borderStyle: "round"
  }, /*#__PURE__*/React.createElement(Text, null, "Welcome to the country CLI")), /*#__PURE__*/React.createElement(TextInput, {
    placeholder: "Enter country name...",
    value: country,
    onChange: setCountry
  }), /*#__PURE__*/React.createElement(Box, {
    borderColor: "white",
    borderStyle: "round"
  }, /*#__PURE__*/React.createElement(Box, {
    width: "40%"
  }, /*#__PURE__*/React.createElement(Text, null, "Country")), /*#__PURE__*/React.createElement(Box, {
    width: "40px"
  }, /*#__PURE__*/React.createElement(Text, null, "Capital")), /*#__PURE__*/React.createElement(Box, {
    width: "40px"
  }, /*#__PURE__*/React.createElement(Text, null, country)), /*#__PURE__*/React.createElement(Box, {
    width: "40px"
  }, /*#__PURE__*/React.createElement(Text, null, capital))));
};
module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJUZXh0IiwiQm94IiwidXNlU3RhdGUiLCJUZXh0SW5wdXQiLCJkZWZhdWx0Iiwid2NjIiwiQXBwIiwiY291bnRyeSIsInNldENvdW50cnkiLCJjYXBpdGFsIiwic2V0Q2FwaXRhbCIsInVzZUVmZmVjdCIsImdldENvdW50cnkiLCJnZXRDb3VudHJ5RGV0YWlsc0J5TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1aS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgeyBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoXCJpbmtcIik7XG5jb25zdCB7IHVzZVN0YXRlIH0gPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCBUZXh0SW5wdXQgPSByZXF1aXJlKFwiaW5rLXRleHQtaW5wdXRcIikuZGVmYXVsdDtcbmNvbnN0IHdjYyA9IHJlcXVpcmUoXCJ3b3JsZC1jb3VudHJpZXMtY2FwaXRhbHNcIik7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblx0Y29uc3QgW2NvdW50cnksIHNldENvdW50cnldID0gdXNlU3RhdGUoXCJcIik7XG5cdGNvbnN0IFtjYXBpdGFsLCBzZXRDYXBpdGFsXSA9IHVzZVN0YXRlKFwiXCIpO1xuXG5cdFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG5cdFx0Y29uc3QgZ2V0Q291bnRyeSA9IHdjYy5nZXRDb3VudHJ5RGV0YWlsc0J5TmFtZShjb3VudHJ5KTtcblx0XHRzZXRDYXBpdGFsKGdldENvdW50cnlbMF0uY2FwaXRhbCk7XG5cdH0pO1xuXG5cdHJldHVybiAoXG5cdFx0PEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCIgYWxpZ25TZWxmPVwibGVmdFwiPlxuXHRcdFx0PEJveCBib3JkZXJDb2xvcj0nZ3JlZW4nIGJvcmRlclN0eWxlPVwicm91bmRcIj5cblx0XHRcdFx0IDxUZXh0PldlbGNvbWUgdG8gdGhlIGNvdW50cnkgQ0xJPC9UZXh0PlxuXHRcdFx0PC9Cb3g+XG5cdFx0XHQ8VGV4dElucHV0XG5cdFx0XHRcdHBsYWNlaG9sZGVyPVwiRW50ZXIgY291bnRyeSBuYW1lLi4uXCJcblx0XHRcdFx0dmFsdWU9e2NvdW50cnl9XG5cdFx0XHRcdG9uQ2hhbmdlPXtzZXRDb3VudHJ5fVxuXHRcdFx0Lz5cblx0XHRcdDxCb3ggYm9yZGVyQ29sb3I9XCJ3aGl0ZVwiIGJvcmRlclN0eWxlPVwicm91bmRcIj5cblx0XHRcdFx0PEJveCB3aWR0aD0nNDAlJz48VGV4dCA+Q291bnRyeTwvVGV4dD48L0JveD5cblx0XHRcdFx0PEJveCB3aWR0aD0nNDBweCc+PFRleHQgPkNhcGl0YWw8L1RleHQ+PC9Cb3g+XG5cdFx0XHRcdDxCb3ggd2lkdGg9JzQwcHgnPjxUZXh0ID57Y291bnRyeX08L1RleHQ+PC9Cb3g+XG5cdFx0XHRcdDxCb3ggd2lkdGg9JzQwcHgnPjxUZXh0ID57Y2FwaXRhbH08L1RleHQ+PC9Cb3g+XG5cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBcHA7XG4iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBQ1osTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUMsSUFBSTtFQUFFQztBQUFJLENBQUMsR0FBR0YsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNwQyxNQUFNO0VBQUVHO0FBQVMsQ0FBQyxHQUFHSCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3JDLE1BQU1JLFNBQVMsR0FBR0osT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUNLLE9BQU87QUFDbkQsTUFBTUMsR0FBRyxHQUFHTixPQUFPLENBQUMsMEJBQTBCLENBQUM7QUFFL0MsTUFBTU8sR0FBRyxHQUFHLE1BQU07RUFDakIsTUFBTSxDQUFDQyxPQUFPLEVBQUVDLFVBQVUsQ0FBQyxHQUFHTixRQUFRLENBQUMsRUFBRSxDQUFDO0VBQzFDLE1BQU0sQ0FBQ08sT0FBTyxFQUFFQyxVQUFVLENBQUMsR0FBR1IsUUFBUSxDQUFDLEVBQUUsQ0FBQztFQUUxQ0osS0FBSyxDQUFDYSxTQUFTLENBQUMsTUFBTTtJQUNyQixNQUFNQyxVQUFVLEdBQUdQLEdBQUcsQ0FBQ1EsdUJBQXVCLENBQUNOLE9BQU8sQ0FBQztJQUN2REcsVUFBVSxDQUFDRSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUNILE9BQU8sQ0FBQztFQUNsQyxDQUFDLENBQUM7RUFFRixvQkFDQyxvQkFBQyxHQUFHO0lBQUMsYUFBYSxFQUFDLFFBQVE7SUFBQyxTQUFTLEVBQUM7RUFBTSxnQkFDM0Msb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxPQUFPO0lBQUMsV0FBVyxFQUFDO0VBQU8sZ0JBQzFDLG9CQUFDLElBQUkscUNBQWtDLENBQ25DLGVBQ04sb0JBQUMsU0FBUztJQUNULFdBQVcsRUFBQyx1QkFBdUI7SUFDbkMsS0FBSyxFQUFFRixPQUFRO0lBQ2YsUUFBUSxFQUFFQztFQUFXLEVBQ3BCLGVBQ0Ysb0JBQUMsR0FBRztJQUFDLFdBQVcsRUFBQyxPQUFPO0lBQUMsV0FBVyxFQUFDO0VBQU8sZ0JBQzNDLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBSyxnQkFBQyxvQkFBQyxJQUFJLGtCQUFnQixDQUFNLGVBQzVDLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBTSxnQkFBQyxvQkFBQyxJQUFJLGtCQUFnQixDQUFNLGVBQzdDLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBTSxnQkFBQyxvQkFBQyxJQUFJLFFBQUdELE9BQU8sQ0FBUSxDQUFNLGVBQy9DLG9CQUFDLEdBQUc7SUFBQyxLQUFLLEVBQUM7RUFBTSxnQkFBQyxvQkFBQyxJQUFJLFFBQUdFLE9BQU8sQ0FBUSxDQUFNLENBRTFDLENBQ0Q7QUFFUixDQUFDO0FBRURLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVCxHQUFHIn0=